Allow a user of a Meteor application to act as another one.

# Example

```
Become.policy(function(fromUserID, toUserID) {
    return Meteor.user.findOne({id: fromUserID}).isSuperUser;
});

if (Meteor.isClient) {
    Template.MyBecomeUserForm.events({
        "submit": function(event, target) {
            Become.become(anotherUserID);
            event.stopPropagation();
        }
    });
}
```


# How It Works

1. Client code calls `Become.become()`
2. `Become.become()` saves the current session token and calls the Meteor login function
2. Server checks policy function (set with `Become.policy`) and returns success or error to client
3. Upon success, Meteor.userId() etc. get updated on the client as is normal upon Meteor login
4. Client may now call `Become.restore()` to restore the previous session token and reconnect

# API Reference

{{>main}}
